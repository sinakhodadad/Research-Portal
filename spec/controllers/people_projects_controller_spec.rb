require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PeopleProjectsController, type: :controller do

    # # This should return the minimal set of attributes required to create a valid
    # # PeopleProject. As you add validations to PeopleProject, be sure to
    # # adjust the attributes here as well.
    # let(:valid_attributes) {
    #     Fabricate.attributes_for(:people_project)
    # }
    #
    # let(:invalid_attributes) {
    #     Fabricate.attributes_for(:people_project , user_id: nil)
    # }
    #
    # # This should return the minimal set of values that should be in the session
    # # in order to pass any filters (e.g. authentication) defined in
    # # PeopleProjectsController. Be sure to keep this updated too.
    # let(:valid_session) { {} }
    #
    # describe "GET #index" do
    #     it "assigns all people_projects as @people_projects" do
    #         people_project = PeopleProject.create! valid_attributes
    #         get :index, {}, valid_session
    #         expect(assigns(:people_projects)).to eq([people_project])
    #     end
    # end
    #
    # describe "GET #show" do
    #     it "assigns the requested people_project as @people_project" do
    #         people_project = PeopleProject.create! valid_attributes
    #         get :show, {:id => people_project.to_param}, valid_session
    #         expect(assigns(:people_project)).to eq(people_project)
    #     end
    # end
    #
    # describe "GET #new" do
    #     it "assigns a new people_project as @people_project" do
    #         get :new, {}, valid_session
    #         expect(assigns(:people_project)).to be_a_new(PeopleProject)
    #     end
    # end
    #
    # describe "POST #create" do
    #     context "with valid params" do
    #         it "creates a new PeopleProject" do
    #             expect {
    #                 post :create, {:people_project => valid_attributes}, valid_session
    #             }.to change(PeopleProject, :count).by(1)
    #         end
    #
    #         it "assigns a newly created people_project as @people_project" do
    #             post :create, {:people_project => valid_attributes}, valid_session
    #             expect(assigns(:people_project)).to be_a(PeopleProject)
    #             expect(assigns(:people_project)).to be_persisted
    #         end
    #
    #         it "redirects to the created people_project" do
    #             post :create, {:people_project => valid_attributes}, valid_session
    #             expect(response).to redirect_to(PeopleProject.last)
    #         end
    #     end
    #
    #     context "with invalid params" do
    #         it "assigns a newly created but unsaved people_project as @people_project" do
    #             post :create, {:people_project => invalid_attributes}, valid_session
    #             expect(assigns(:people_project)).to be_a_new(PeopleProject)
    #         end
    #
    #         it "re-renders the 'new' template" do
    #             post :create, {:people_project => invalid_attributes}, valid_session
    #             expect(response).to render_template("new")
    #         end
    #     end
    # end
    #
    # describe "PUT #update" do
    #     context "with valid params" do
    #         let(:new_attributes) {
    #             skip("Add a hash of attributes valid for your model")
    #         }
    #
    #         it "updates the requested people_project" do
    #             people_project = PeopleProject.create! valid_attributes
    #             put :update, {:id => people_project.to_param, :people_project => new_attributes}, valid_session
    #             people_project.reload
    #             skip("Add assertions for updated state")
    #         end
    #
    #         it "assigns the requested people_project as @people_project" do
    #             people_project = PeopleProject.create! valid_attributes
    #             put :update, {:id => people_project.to_param, :people_project => valid_attributes}, valid_session
    #             expect(assigns(:people_project)).to eq(people_project)
    #         end
    #
    #         it "redirects to the people_project" do
    #             people_project = PeopleProject.create! valid_attributes
    #             put :update, {:id => people_project.to_param, :people_project => valid_attributes}, valid_session
    #             expect(response).to redirect_to(people_project)
    #         end
    #     end
    #
    #     context "with invalid params" do
    #         it "assigns the people_project as @people_project" do
    #             people_project = PeopleProject.create! valid_attributes
    #             put :update, {:id => people_project.to_param, :people_project => invalid_attributes}, valid_session
    #             expect(assigns(:people_project)).to eq(people_project)
    #         end
    #
    #         it "re-renders the 'edit' template" do
    #             people_project = PeopleProject.create! valid_attributes
    #             put :update, {:id => people_project.to_param, :people_project => invalid_attributes}, valid_session
    #             expect(response).to render_template("edit")
    #         end
    #     end
    # end
    #
    # describe "DELETE #destroy" do
    #     it "destroys the requested people_project" do
    #         people_project = PeopleProject.create! valid_attributes
    #         expect {
    #             delete :destroy, {:id => people_project.to_param}, valid_session
    #         }.to change(PeopleProject, :count).by(-1)
    #     end
    #
    #     it "redirects to the people_projects list" do
    #         people_project = PeopleProject.create! valid_attributes
    #         delete :destroy, {:id => people_project.to_param}, valid_session
    #         expect(response).to redirect_to(people_projects_url)
    #     end
    # end

end
